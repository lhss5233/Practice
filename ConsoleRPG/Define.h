#pragma once

#define SAFE_DELETE(x) { if( (x) != nullptr) { delete (x); (x) = nullptr; } }
#define SAFE_DELETE_ARR(x) { if( (x) != nullptr) { delete[] (x); (x) = nullptr; } }




enum eStage
{
	None,

	Stage = 3,
	StageX = 18,
	StageY = 20,
	
	
	/*
	▥ = 0, 공백
	▣, 		벽
	☆,		열쇠1
	★,		문1
	☏,		열쇠2
	☎,		문2
	♠,		몬스터
	♧,		회복1
	♣,		회복2
	⊙,		승리포인트
	♥,		플레이어
	◈			무기
	▼			 방어구
*/
};

enum class eScene
{
	None,

	Intro,
	Stage1,

	Maxs
};

enum class eKey
{
	None = 0,

	Left,
	Up,
	Right,
	Down,

	Start = 8,
	Quit,
	Reset,

};

enum class eEquip
{

	None = 0,

	NFist = 1,
	NSword,
	SSword,

	NArmor = 1,
	LArmor,
	SArmor,

	Max,
};

struct HealItem
{
	int LowHeal = 10;
	int Heal = 30;
};

struct sMap
{
	static void gotoxy(int x, int y)
	{
		COORD CursorPosition = { x, y };
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), CursorPosition);
	}
	void MapInfo()
	{
		gotoxy(65, 2);	std::cout << "▣ = 벽" << std::endl;
		gotoxy(65, 3);	std::cout << "☆ = 열쇠1" << std::endl;
		gotoxy(65, 4);	std::cout << "★ = 문1" << std::endl;
		gotoxy(65, 5);	std::cout << "☏ = 열쇠2" << std::endl;
		gotoxy(65, 6);	std::cout << "☎ = 문2" << std::endl;
		gotoxy(65, 7);	std::cout << "♠ = 몬스터" << std::endl;
		gotoxy(65, 8);	std::cout << "♧ = 회복1" << std::endl;
		gotoxy(65, 9);	std::cout << "♣ = 회복2" << std::endl;
		gotoxy(65, 10);	std::cout << "⊙ = 승리포인트" << std::endl;
		gotoxy(65, 11);	std::cout << "♥ = 플레이어" << std::endl;
		gotoxy(65, 12);	std::cout << "◈ = 무기" << std::endl;
		gotoxy(65, 13);	std::cout << "▼ = 방어구" << std::endl;
	}
	const int arrStage[Stage][StageX][StageY]
	{
		{
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,7,0,0,0,0,6,0,0,0,0,5,6,0,1,1},
			{1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,9,1,1},
			{1,1,1,1,1,0,1,1,1,1,4,1,1,1,1,1,1,1,1,1},
			{1,1,1,1,1,0,1,1,1,1,0,6,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
			{1,1,12,8,6,6,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,7,0,1,1,1,1,1,1,1},
			{1,1,8,0,0,6,0,0,0,0,0,0,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},
			{1,1,1,1,1,1,1,1,1,1,6,0,0,0,0,0,0,0,0,1},
			{1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1},
			{1,2,11,6,0,0,0,7,1,1,1,1,1,1,1,1,1,0,10,1},
			{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
		 },
		/*
		{
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣}
		 },
		{
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣},
			{▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣,▣}
		 }
		 */
	};
};


